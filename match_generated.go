package betteralign

import (
	"unicode/utf8"
)

// reGeneratedBy matches '^//\s*Code generated by .* DO NOT EDIT\.$', start condition 4
func reGeneratedBy(s string) bool {
	const endOfText = -1
	const minInputLen = 33
	var pos, pos0, width, width0, width1 int
	var r, r1 rune
	lastRestartPos := -1
	step := func(pos int) (rune, int) {
		if pos < len(s) {
			c := s[pos]
			if c < utf8.RuneSelf {
				return rune(c), 1
			}
			return utf8.DecodeRuneInString(s[pos:])
		}
		return endOfText, 0
	}
restart:
	r, r1 = endOfText, endOfText
	width, width1 = 0, 0
	r, width = step(pos)
	if r != endOfText {
		r1, width1 = step(pos + width)
	}
	if pos == lastRestartPos {
		return false
	}
	lastRestartPos = pos
	if pos != 0 {
		return false
	}
	pos0 = pos
	width0 = width
	goto l0
l0:
	if pos != pos0 {
		return false
	}
	goto l3
	goto l2
l2:
	pos = pos0 + width0
	goto restart
	goto l3
l3:
	if r == '/' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l6
	}
	goto l5
l5:
	pos = pos0 + width0
	goto restart
	goto l6
l6:
	if r == '/' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l9
	}
	goto l8
l8:
	pos = pos0 + width0
	goto restart
	goto l9
l9:
	if r == 'C' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l14
	}
	goto l11
l11:
	if r < '\t' {
		goto l11out
	}
	if r <= '\n' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l120
	}
	if r < '\f' {
		goto l11out
	}
	if r <= '\r' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l120
	}
	if r == ' ' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l120
	}
l11out:
	goto l13
l13:
	pos = pos0 + width0
	goto restart
	goto l14
l14:
	if r == 'o' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l17
	}
	goto l16
l16:
	pos = pos0 + width0
	goto restart
	goto l17
l17:
	if r == 'd' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l20
	}
	goto l19
l19:
	pos = pos0 + width0
	goto restart
	goto l20
l20:
	if r == 'e' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l23
	}
	goto l22
l22:
	pos = pos0 + width0
	goto restart
	goto l23
l23:
	if r == ' ' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l26
	}
	goto l25
l25:
	pos = pos0 + width0
	goto restart
	goto l26
l26:
	if r == 'g' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l29
	}
	goto l28
l28:
	pos = pos0 + width0
	goto restart
	goto l29
l29:
	if r == 'e' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l32
	}
	goto l31
l31:
	pos = pos0 + width0
	goto restart
	goto l32
l32:
	if r == 'n' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l35
	}
	goto l34
l34:
	pos = pos0 + width0
	goto restart
	goto l35
l35:
	if r == 'e' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l38
	}
	goto l37
l37:
	pos = pos0 + width0
	goto restart
	goto l38
l38:
	if r == 'r' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l41
	}
	goto l40
l40:
	pos = pos0 + width0
	goto restart
	goto l41
l41:
	if r == 'a' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l44
	}
	goto l43
l43:
	pos = pos0 + width0
	goto restart
	goto l44
l44:
	if r == 't' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l47
	}
	goto l46
l46:
	pos = pos0 + width0
	goto restart
	goto l47
l47:
	if r == 'e' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l50
	}
	goto l49
l49:
	pos = pos0 + width0
	goto restart
	goto l50
l50:
	if r == 'd' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l53
	}
	goto l52
l52:
	pos = pos0 + width0
	goto restart
	goto l53
l53:
	if r == ' ' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l56
	}
	goto l55
l55:
	pos = pos0 + width0
	goto restart
	goto l56
l56:
	if r == 'b' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l59
	}
	goto l58
l58:
	pos = pos0 + width0
	goto restart
	goto l59
l59:
	if r == 'y' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l62
	}
	goto l61
l61:
	pos = pos0 + width0
	goto restart
	goto l62
l62:
	if r == ' ' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l65
	}
	goto l64
l64:
	pos = pos0 + width0
	goto restart
	goto l65
l65:
	if r == ' ' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l70
	}
	goto l67
l67:
	if r < '\x00' {
		goto l67out
	}
	if r <= '\t' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l115
	}
	if r < '\v' {
		goto l67out
	}
	if r <= '\U0010ffff' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l115
	}
l67out:
	goto l69
l69:
	pos = pos0 + width0
	goto restart
	goto l70
l70:
	if r == ' ' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l70
	}
	goto l72
l72:
	if r == 'D' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l77
	}
	goto l74
l74:
	if r < '\x00' {
		goto l74out
	}
	if r <= '\t' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l115
	}
	if r < '\v' {
		goto l74out
	}
	if r <= '\U0010ffff' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l115
	}
l74out:
	goto l76
l76:
	pos = pos0 + width0
	goto restart
	goto l77
l77:
	if r == 'O' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l80
	}
	goto l79
l79:
	pos = pos0 + width0
	goto restart
	goto l80
l80:
	if r == ' ' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l83
	}
	goto l82
l82:
	pos = pos0 + width0
	goto restart
	goto l83
l83:
	if r == 'N' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l86
	}
	goto l85
l85:
	pos = pos0 + width0
	goto restart
	goto l86
l86:
	if r == 'O' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l89
	}
	goto l88
l88:
	pos = pos0 + width0
	goto restart
	goto l89
l89:
	if r == 'T' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l92
	}
	goto l91
l91:
	pos = pos0 + width0
	goto restart
	goto l92
l92:
	if r == ' ' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l95
	}
	goto l94
l94:
	pos = pos0 + width0
	goto restart
	goto l95
l95:
	if r == 'E' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l98
	}
	goto l97
l97:
	pos = pos0 + width0
	goto restart
	goto l98
l98:
	if r == 'D' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l101
	}
	goto l100
l100:
	pos = pos0 + width0
	goto restart
	goto l101
l101:
	if r == 'I' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l104
	}
	goto l103
l103:
	pos = pos0 + width0
	goto restart
	goto l104
l104:
	if r == 'T' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l107
	}
	goto l106
l106:
	pos = pos0 + width0
	goto restart
	goto l107
l107:
	if r == '.' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l110
	}
	goto l109
l109:
	pos = pos0 + width0
	goto restart
	goto l110
l110:
	if r == endOfText {
		return true
	}
	goto l112
l112:
	pos = pos0 + width0
	goto restart
	goto l113
l113:
	goto l114
l114:
	pos = pos0 + width0
	goto restart
	goto l115
l115:
	if r == ' ' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l70
	}
	goto l117
l117:
	if r < '\x00' {
		goto l117out
	}
	if r <= '\t' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l115
	}
	if r < '\v' {
		goto l117out
	}
	if r <= '\U0010ffff' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l115
	}
l117out:
	goto l119
l119:
	pos = pos0 + width0
	goto restart
	goto l120
l120:
	if r == 'C' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l14
	}
	goto l122
l122:
	if r < '\t' {
		goto l122out
	}
	if r <= '\n' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l120
	}
	if r < '\f' {
		goto l122out
	}
	if r <= '\r' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l120
	}
	if r == ' ' {
		pos += width
		if r, width = r1, width1; r != endOfText {
			r1, width1 = step(pos + width)
		}
		goto l120
	}
l122out:
	goto l124
l124:
	pos = pos0 + width0
	goto restart
}
